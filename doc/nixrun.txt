*nixrun.txt* (ab)use the power of imperative nix in neovim

Introduction                                             *nixrun-introduction*

NixRun provides a convenient way to install plugins temporarily, like the 
`nix run` command.

The commands |NixRun| is used to install plugins, LSPs, and treesitter
parsers.

nixrun.setup({opts})                                          *nixrun.setup()*

Configures the options to be used by the plugin.
>lua
    require("nixrun").setup({
        -- registry/url of nixpkgs, e.g. "flake:nixpkgs",
        -- "/home/user/nixpkgs", "channel:nixos-21.05"
        nixpkgs = "flake:nixpkgs",
    })
<

                                                                     *:NixRun*

See |:NixRun-plugin|, |:NixRun-grammar|, and |:NixRun-lsp|

                                          *nixrun-treesitter* *:NixRun-grammar*

Syntax: `NixRun grammar <grammarName or flakeref#attrpath>`

- `grammarName` can be any of those listed in
  `nixpkgs#vimPlugins.nvim-treesitter.builtGrammars`.
- see |flake-output-attribute| for explaination on `flakeref#attrpath`

Temporarily install a treesitter grammar for this session. After the grammar
is successfully installed, the buffer must be reloaded using |:edit| for
treesitter highlighting to take effect.
>vim
    NixRun grammar clojure
<

                                              *nixrun-plugin* *:NixRun-plugin*

Syntax: `NixRun plugin <pluginName or flakeref#attrpath or flakerefUrl>`

- `pluginName` can be any of those listed in `nixpkgs#vimPlugins`. Entries of
  this type will also install its dependencies.
- see |flake-output-attribute| for explaination on `flakeref#attrpath`
- `flakerefUrl` is something like `github:owner/repo`. See |flakeref|.
  flakrefs are NOT treated as flakes, we are just using the convenient URL
  syntax.

Temporarily install a plugin for this session. 

Example:

>vim
    " adds nixpkgs#vimPlugins.oil-nvim + dependencies to runtimepath
    NixRun plugin oil-nvim

    " adds my-personal-flake#my-custom-plugin to runtimepath (dependency not 
    " included currently :c )
    NixRun plugin my-personal-flake#my-custom-plugin

    " pulls the repo github:t-troebst/perfanno.nvim and add it to runtimepath,
    " no dependency resolution
    NixRun plugin github:t-troebst/perfanno.nvim
<

Install procedure: After the plugin is successfully installed, mimicking
|:packadd|, the following files are sourced:
>
    /nix/store/plugin-dir/plugin/**/*.vim
    /nix/store/plugin-dir/plugin/**/*.lua

    -- if filetype detection was enabled:
    /nix/store/plugin-dir/ftdetect/*.vim
<

                                                    *nixrun-lsp* *:NixRun-lsp*

Syntax: `NixRun lsp <lsp>`

Currently only a small amount of LSPs are supported, and most of them are
generated through a script, so your mileage may vary. `<lsp>` should be the
name of the lsp as given by lspconfig, NOT the name of the language itself.

Example

>vim
    NixRun lsp vala_ls
<
                                        *nixrun-lua-api* *nixrun.add_plugin()* 
                                     *nixrun.add_lsp()* *nixrun.add_grammar()*

A lua API is also exposed that does the same thing as |:NixRun| plus run some
lua code when install completes.

See the lua file `../lua/nixrun.lua` (press `gf` on the file name to jump to
the file) for API details

Example:

>lua
    require('nixrun').add_plugin('nvim-tree-lua', function(paths)
        -- this will be called when install finishes
        require('nvim-tree').setup{}
    end)
<

                                           *flakeref* *flake-output-attribute*

A Flake output attribute is a string in the form of `flakeref#attrpath`, e.g.
`nixpkgs#vimPlugins.nvim-treesitter`. For more details, see the "Flake output
attribute" section in `nix --help`.

`flakeref` is a shorthand for common URLs, e.g. `github:owner/repo`

Note that in within this plugin, a distinction is made between
`flakeref#attrPath` and `flakeref`:

- `flakeref#attrPath` installs a package of a valid flake.
- `flakeref` alone treats the url as the vim plugin source.

vim:tw=78:ts=8:sw=4:et:ft=help:norl:
